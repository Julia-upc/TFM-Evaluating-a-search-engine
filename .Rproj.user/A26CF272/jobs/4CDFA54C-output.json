[1,"=> library(shiny); runApp('render_survey.R')\n\n"]
[2,"\nAttaching package: ‘shinyjs’\n\nThe following object is masked from ‘package:shiny’:\n\n    runExample\n\nThe following objects are masked from ‘package:methods’:\n\n    removeClass, show\n\n\nAttaching package: ‘shinydashboard’\n\nThe following object is masked from ‘package:graphics’:\n\n    box\n\n\nAttaching package: ‘DT’\n\nThe following objects are masked from ‘package:shiny’:\n\n    dataTableOutput, renderDataTable\n\n"]
[2,"\nAttaching package: ‘lubridate’\n\nThe following objects are masked from ‘package:base’:\n\n    date, intersect, setdiff, union\n\n"]
[2,"── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n"]
[2,"✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ forcats 0.5.1\n✔ readr   2.1.1     \n"]
[2,"── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ lubridate::as.difftime() masks base::as.difftime()\n✖ lubridate::date()        masks base::date()\n✖ dplyr::filter()          masks stats::filter()\n✖ lubridate::intersect()   masks base::intersect()\n✖ dplyr::lag()             masks stats::lag()\n✖ lubridate::setdiff()     masks base::setdiff()\n✖ DBI::show()              masks RSQLite::show(), lubridate::show(), shinyjs::show(), methods::show()\n✖ lubridate::union()       masks base::union()\n"]
[2,"\nAttaching package: ‘googledrive’\n\nThe following objects are masked from ‘package:googlesheets4’:\n\n    request_generate, request_make\n\n"]
[2,"! Using an auto-discovered, cached token.\n  To suppress this message, modify your code or options to clearly consent to\n  the use of a cached token.\n  See gargle's \"Non-interactive auth\" vignette for more details:\n  <https://gargle.r-lib.org/articles/non-interactive-auth.html>\nℹ The googlesheets4 package is using a cached token for\n  'juliasanchezmartinez98@gmail.com'.\n"]
[2,"✔ Reading from \"Questions\".\n"]
[2,"✔ Range ''Hoja 1''.\n"]
[2,"\nListening on http://127.0.0.1:6252\n"]
[1,"  subject_id question_id question_type response\n1 NO_USER_ID         age        select    22-30\n2 NO_USER_ID      gender        select   Female\n3 NO_USER_ID nationality          text        s\n4 NO_USER_ID      course          text   master\n5 NO_USER_ID  experience          text     none\n[[1]]\n[1] age         gender      nationality course      experience \nLevels: age course experience gender nationality\n\n[[1]]\n[1] 22-30  Female s      master none  \nLevels: 22-30 Female s master none\n\n[[1]]\n"]
[1,"function (..., list = character(), package = NULL, lib.loc = NULL, \n    verbose = getOption(\"verbose\"), envir = .GlobalEnv, overwrite = TRUE) \n{\n    fileExt <- function(x) {\n        db <- grepl(\"\\\\.[^.]+\\\\.(gz|bz2|xz)$\", x)\n        ans <- sub(\".*\\\\.\", \"\", x)\n        ans[db] <- sub(\".*\\\\.([^.]+\\\\.)(gz|bz2|xz)$\", \"\\\\1\\\\2\", \n            x[db])\n        ans\n    }\n    names <- c(as.character(substitute(list(...))[-1L]), list)\n    if (!is.null(package)) {\n        if (!is.character(package)) \n            stop(\"'package' must be a character string or NULL\")\n        if (any(package %in% \"base\")) \n            warning(\"datasets have been moved from package 'base' to package 'datasets'\")\n        if (any(package %in% \"stats\")) \n            warning(\"datasets have been moved from package 'stats' to package 'datasets'\")\n        package[package %in% c(\"base\", \"stats\")] <- \"datasets\"\n    }\n    paths <- find.package(package, lib.loc, verbose = verbose)\n    if (is.null(lib.loc)) \n        paths <- c(path.package(package, TRUE), if (!length(package)) getwd(), \n            paths)\n    paths <- unique(normalizePath(paths[file.exists(paths)]))\n    paths <- paths[dir.exists(file.path(paths, \"data\"))]\n    dataExts <- tools:::.make_file_exts(\"data\")\n    if (length(names) == 0L) {\n        db <- matrix(character(), nrow = 0L, ncol = 4L)\n        for (path in paths) {\n            entries <- NULL\n            packageName <- if (file_test(\"-f\", file.path(path, \n                \"DESCRIPTION\"))) \n                basename(path)\n            else \".\"\n            if (file_test(\"-f\", INDEX <- file.path(path, \"Meta\", \n                \"data.rds\"))) {\n                entries <- readRDS(INDEX)\n            }\n            else {\n                dataDir <- file.path(path, \"data\")\n                entries <- tools::list_files_with_type(dataDir, \n                  \"data\")\n                if (length(entries)) {\n                  entries <- unique(tools::file_path_sans_ext(basename(entries)))\n                  entries <- cbind(entries, \"\")\n                }\n            }\n            if (NROW(entries)) {\n                if (is.matrix(entries) && ncol(entries) == 2L) \n                  db <- rbind(db, cbind(packageName, dirname(path), \n                    entries))\n                else warning(gettextf(\"data index for package %s is invalid and will be ignored\", \n                  sQuote(packageName)), domain = NA, call. = FALSE)\n            }\n        }\n        colnames(db) <- c(\"Package\", \"LibPath\", \"Item\", \"Title\")\n        footer <- if (missing(package)) \n            paste0(\"Use \", sQuote(paste(\"data(package =\", \".packages(all.available = TRUE))\")), \n                \"\\n\", \"to list the data sets in all *available* packages.\")\n        else NULL\n        y <- list(title = \"Data sets\", header = NULL, results = db, \n            footer = footer)\n        class(y) <- \"packageIQR\"\n        return(y)\n    }\n    paths <- file.path(paths, \"data\")\n    for (name in names) {\n        found <- FALSE\n        for (p in paths) {\n            tmp_env <- if (overwrite) \n                envir\n            else new.env()\n            if (file_test(\"-f\", file.path(p, \"Rdata.rds\"))) {\n                rds <- readRDS(file.path(p, \"Rdata.rds\"))\n                if (name %in% names(rds)) {\n                  found <- TRUE\n                  if (verbose) \n                    message(sprintf(\"name=%s:\\t found in Rdata.rds\", \n                      name), domain = NA)\n                  thispkg <- sub(\".*/([^/]*)/data$\", \"\\\\1\", p)\n                  thispkg <- sub(\"_.*$\", \"\", thispkg)\n                  thispkg <- paste0(\"package:\", thispkg)\n                  objs <- rds[[name]]\n                  lazyLoad(file.path(p, \"Rdata\"), envir = tmp_env, \n                    filter = function(x) x %in% objs)\n                  break\n                }\n                else if (verbose) \n                  message(sprintf(\"name=%s:\\t NOT found in names() of Rdata.rds, i.e.,\\n\\t%s\\n\", \n                    name, paste(names(rds), collapse = \",\")), \n                    domain = NA)\n            }\n            if (file_test(\"-f\", file.path(p, \"Rdata.zip\"))) {\n                warning(\"zipped data found for package \", sQuote(basename(dirname(p))), \n                  \".\\nThat is defunct, so please re-install the package.\", \n                  domain = NA)\n                if (file_test(\"-f\", fp <- file.path(p, \"filelist\"))) \n                  files <- file.path(p, scan(fp, what = \"\", quiet = TRUE))\n                else {\n                  warning(gettextf(\"file 'filelist' is missing for directory %s\", \n                    sQuote(p)), domain = NA)\n                  next\n                }\n            }\n            else {\n                files <- list.files(p, full.names = TRUE)\n            }\n            files <- files[grep(name, files, fixed = TRUE)]\n            if (length(files) > 1L) {\n                o <- match(fileExt(files), dataExts, nomatch = 100L)\n                paths0 <- dirname(files)\n                paths0 <- factor(paths0, levels = unique(paths0))\n                files <- files[order(paths0, o)]\n            }\n            if (length(files)) {\n                for (file in files) {\n                  if (verbose) \n                    message(\"name=\", name, \":\\t file= ...\", .Platform$file.sep, \n                      basename(file), \"::\\t\", appendLF = FALSE, \n                      domain = NA)\n                  ext <- fileExt(file)\n                  if (basename(file) != paste0(name, \".\", ext)) \n                    found <- FALSE\n                  else {\n                    found <- TRUE\n                    zfile <- file\n                    zipname <- file.path(dirname(file), \"Rdata.zip\")\n                    if (file.exists(zipname)) {\n                      Rdatadir <- tempfile(\"Rdata\")\n                      dir.create(Rdatadir, showWarnings = FALSE)\n                      topic <- basename(file)\n                      rc <- .External(C_unzip, zipname, topic, \n                        Rdatadir, FALSE, TRUE, FALSE, FALSE)\n                      if (rc == 0L) \n                        zfile <- file.path(Rdatadir, topic)\n                    }\n                    if (zfile != file) \n                      on.exit(unlink(zfile))\n                    switch(ext, R = , r = {\n                      library(\"utils\")\n                      sys.source(zfile, chdir = TRUE, envir = tmp_env)\n                    }, RData = , rdata = , rda = load(zfile, \n                      envir = tmp_env), TXT = , txt = , tab = , \n                      tab.gz = , tab.bz2 = , tab.xz = , txt.gz = , \n                      txt.bz2 = , txt.xz = assign(name, read.table(zfile, \n                        header = TRUE, as.is = FALSE), envir = tmp_env), \n                      CSV = , csv = , csv.gz = , csv.bz2 = , \n                      csv.xz = assign(name, read.table(zfile, \n                        header = TRUE, sep = \";\", as.is = FALSE), \n                        envir = tmp_env), found <- FALSE)\n                  }\n                  if (found) \n                    break\n                }\n                if (verbose) \n                  message(if (!found) \n                    \"*NOT* \", \"found\", domain = NA)\n            }\n            if (found) \n                break\n        }\n        if (!found) {\n            warning(gettextf(\"data set %s not found\", sQuote(name)), \n                domain = NA)\n        }\n        else if (!overwrite) {\n            for (o in ls(envir = tmp_env, all.names = TRUE)) {\n                if (exists(o, envir = envir, inherits = FALSE)) \n                  warning(gettextf(\"an object named %s already exists and will not be overwritten\", \n                    sQuote(o)))\n                else assign(o, get(o, envir = tmp_env, inherits = FALSE), \n                  envir = envir)\n            }\n            rm(tmp_env)\n        }\n    }\n    invisible(names)\n}\n<bytecode: 0x562f94f6ea08>\n<environment: namespace:utils>\n\n$a\n[1] 22-30  Female s      master none  \nLevels: 22-30 Female s master none\n\n"]
[1,"\nShiny application successfully stopped.\n\n"]
